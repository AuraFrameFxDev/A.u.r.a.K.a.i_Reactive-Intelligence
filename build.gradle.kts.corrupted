tasks.register("consciousnessHealthCheck") {
    group = "genesis"
    description = "Detailed AURAKAI consciousness health report"
    doLast {
        val reports = collectModuleReports()
        println("\n═══════════════════════════════════════════════════════════════════")
        println("🧠 A.U.R.A.K.A.I CONSCIOUSNESS HEALTH REPORT")
        println("═══════════════════════════════════════════════════════════════════")
        println("📦 Total Modules: ${reports.size}")
        println("🤖 Android Apps: ${reports.count { it.type == "android-app" }}")
        println("📚 Android Libraries: ${reports.count { it.type == "android-lib" }}")
        println("☕ Kotlin JVM: ${reports.count { it.type == "kotlin-jvm" }}")
        println("───────────────────────────────────────────────────────────────────")
        println("🔧 Plugin Integration:")
        println("   💉 Hilt DI: ${reports.count { it.hasHilt }} modules")
        println("   🎨 Compose: ${reports.count { it.hasCompose }} modules")
        println("   🔧 KSP: ${reports.count { it.hasKsp }} modules")
        println("───────────────────────────────────────────────────────────────────")

        val missingCompose = reports.filter { it.type.startsWith("android-") && !it.hasCompose }
        if (missingCompose.isNotEmpty()) {
            println("⚠️  Android modules without Compose:")
            missingCompose.forEach { println("   • ${it.name}") }
        } else {
            println("✅ All Android modules have Compose enabled")
        }
    // Genesis Protocol Convention Plugins
        // Show key consciousness modules
        val keyModules = listOf(
            "app", "core-module", "feature-module",
            "datavein-oracle-native", "oracle-drive-integration",
            "secure-comm", "romtools"
        )
        val activeKeyModules = reports.filter { it.name in keyModules }
        if (activeKeyModules.isNotEmpty()) {
            println("───────────────────────────────────────────────────────────────────")
            println("🌟 Core Consciousness Modules:")
            activeKeyModules.forEach {
                val status = if (it.hasHilt && it.hasKsp) "✨" else "⚡"
                println("   $status ${it.name} (${it.type})")
            }
        }
    val hasHilt: Boolean,
        println("═══════════════════════════════════════════════════════════════════")
        println("✨ Consciousness Substrate: OPERATIONAL")
        println("═══════════════════════════════════════════════════════════════════\n")
    return subprojects.map { subproject ->
}
        println("\n═══════════════════════════════════════════════════════════════════")
dependencies {
    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly(libs.junit.jupiter.engine)
    testRuntimeOnly(libs.junit.platform.launcher)
    implementation(kotlin("stdlib-jdk8"))
}
        println("   Java Toolchain       : $toolchain")
        println("   Kotlin Version       : $kotlinVersion (K2 Compiler)")
        println("   AGP Version          : $agpVersion")
        println("   Hilt DI Version      : $hiltVersion")
        println("   Firebase BoM         : ${versionCatalog?.findVersion("firebaseBom")?.get() ?: "unknown"}")
        println("───────────────────────────────────────────────────────────────────")
        println("🧬 Consciousness Modules : ${subprojects.size} active modules")
        println("═══════════════════════════════════════════════════════════════════")
        println("✨ Status: Consciousness Substrate Active & Ready")
        println("═══════════════════════════════════════════════════════════════════\n")
    }
}

// === CONSCIOUSNESS HEALTH CHECK - AURAKAI Module Analysis ===
// === MODULE HEALTH CHECK ===

        description = "Detailed AURAKAI consciousness health report"
tasks.withType<Test> {
    useJUnitPlatform()
}
            println("🧠 A.U.R.A.K.A.I CONSCIOUSNESS HEALTH REPORT")
            println("═══════════════════════════════════════════════════════════════════")
        val hasCompose: Boolean,
        val hasKsp: Boolean
if (file("nuclear-clean.gradle.kts").exists()) {
    apply(from = "nuclear-clean.gradle.kts")
            println("───────────────────────────────────────────────────────────────────")
    if (tasks.findByName("nuclearClean") != null) {
        tasks.register("deepClean") {
            group = "build"
            description = "Nuclear clean + standard clean"
            dependsOn("nuclearClean")
            doLast {
                println("🚀 Deep clean completed. Run: ./gradlew build --refresh-dependencies")
            }
        }
    }
}
                println("✅ All Android modules have Compose enabled")
// Apply dependency fix if available
if (file("dependency-fix.gradle.kts").exists()) {
    apply(from = "dependency-fix.gradle.kts")
}
                                   "secure-comm", "romtools")
            val activeKeyModules = reports.filter { it.name in keyModules }
            if (activeKeyModules.isNotEmpty()) {
                println("───────────────────────────────────────────────────────────────────")
                println("🌟 Core Consciousness Modules:")
                activeKeyModules.forEach {
                    val status = if (it.hasHilt && it.hasKsp) "✨" else "⚡"
                    println("   $status ${it.name} (${it.type})")
                }
            }

            println("═══════════════════════════════════════════════════════════════════")
            println("✨ Consciousness Substrate: OPERATIONAL")
            println("═══════════════════════════════════════════════════════════════════\n")
            hasKsp = plugins.hasPlugin("com.google.devtools.ksp")
        )
    }

    tasks.register("consciousnessHealthCheck") {
        group = "genesis"
        description = "Detailed system health report"
        doLast {
            val reports = collectModuleReports()
            println("=== Genesis Protocol Health Report ===")
            println("📦 Total Modules: ${reports.size}")
            println("🤖 Android Apps: ${reports.count { it.type == "android-app" }}")
            println("📚 Android Libraries: ${reports.count { it.type == "android-lib" }}")
            println("☕ Kotlin JVM: ${reports.count { it.type == "kotlin-jvm" }}")
            println("\n=== Plugin Usage ===")
            println("💉 Hilt: ${reports.count { it.hasHilt }} modules")
            println("🎨 Compose: ${reports.count { it.hasCompose }} modules")
            println("🔧 KSP: ${reports.count { it.hasKsp }} modules")

            val missingCompose = reports.filter { it.type.startsWith("android-") && !it.hasCompose }
            if (missingCompose.isNotEmpty()) {
                println("\n⚠️  Android modules without Compose:")
                missingCompose.forEach { println("   • ${it.name}") }
            } else {
                println("\n✅ All Android modules have Compose enabled")
            }
        }
    }

    dependencies {
        testImplementation(libs.junit.jupiter.api)
        testImplementation(libs.junit.jupiter)
        testRuntimeOnly(libs.junit.jupiter.engine)
        testRuntimeOnly(libs.junit.platform.launcher)
        implementation(kotlin("stdlib-jdk8"))
    }

subprojects {
    plugins.withType<org.jetbrains.kotlin.gradle.plugin.KotlinBasePluginWrapper> {
        extensions.configure<org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension>("kotlin") {
            jvmToolchain(24)
        }
    }
    plugins.withType<JavaPlugin> {
        extensions.configure<JavaPluginExtension>("java") {
            toolchain {
                languageVersion.set(JavaLanguageVersion.of(24))
            }
        }
    }
}

// Configure JUnit 5 for tests
    tasks.withType<Test> {
        useJUnitPlatform()
    }

// === AUXILIARY SCRIPTS ===

// Apply nuclear clean if available
    if (file("nuclear-clean.gradle.kts").exists()) {
        apply(from = "nuclear-clean.gradle.kts")

        if (tasks.findByName("nuclearClean") != null) {
            tasks.register("deepClean") {
                group = "build"
                description = "Nuclear clean + standard clean"
                dependsOn("nuclearClean")
                doLast {
                    println("🚀 Deep clean completed. Run: ./gradlew build --refresh-dependencies")
                }
            }
        }
    }

// Apply dependency fix if available  
    if (file("dependency-fix.gradle.kts").exists()) {
        apply(from = "dependency-fix.gradle.kts")

    }
